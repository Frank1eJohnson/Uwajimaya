// Copyright (c) Csaba Molnar & Daniel Butum. All Rights Reserved.

#pragma once
#include "SoIMortalTypes.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSoDmg FSoDmg::operator*(const FSoDmg& Other) const
{
	FSoDmg Dmg;
	Dmg.Physical = Physical * Other.Physical;
	Dmg.Magical = Magical * Other.Magical;
	return Dmg;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSoDmg FSoDmg::operator*(float Multiplier) const
{
	FSoDmg Dmg;
	Dmg.Physical = Physical * Multiplier;
	Dmg.Magical = Magical * Multiplier;
	return Dmg;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSoDmg::operator*=(const FSoDmg& Other)
{
	Physical *= Other.Physical;
	Magical *= Other.Magical;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSoDmg::operator*=(float Multiplier)
{
	Physical *= Multiplier;
	Magical *= Multiplier;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSoDmg FSoDmg::operator+(const FSoDmg& Other) const
{
	FSoDmg Dmg;
	Dmg.Physical = Physical + Other.Physical;
	Dmg.Magical = Magical + Other.Magical;
	return Dmg;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSoDmg::operator+=(const FSoDmg& Other)
{
	Physical += Other.Physical;
	Magical += Other.Magical;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float FSoDmg::operator[](int32 Index) const
{
	if (Index == 0)
		return Physical;

	return Magical;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSoDmg FSoDmg::OneMinus() const
{
	FSoDmg Dmg;
	Dmg.Physical = 1.0f - Physical;
	Dmg.Magical = 1.0f - Magical;
	return Dmg;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float FSoDmg::Sum() const
{
	return Physical + Magical;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ESoDmgType FSoDmg::GetType() const
{
	if (Physical > KINDA_SMALL_NUMBER && Magical > KINDA_SMALL_NUMBER)
		return ESoDmgType::Mixed;

	if (Physical > KINDA_SMALL_NUMBER)
		return ESoDmgType::Physical;

	if (Magical > KINDA_SMALL_NUMBER)
		return ESoDmgType::Magic;

	return ESoDmgType::None;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSoDmg::HasPhysical() const
{
	return Physical > KINDA_SMALL_NUMBER;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSoDmg::HasMagical() const
{
	return Magical > KINDA_SMALL_NUMBER;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSoDmg::SetToZero()
{
	Physical = 0.0f;
	Magical = 0.0f;
}
