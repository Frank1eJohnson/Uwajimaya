// Copyright (c) Csaba Molnar & Daniel Butum. All Rights Reserved.
#include "SoEAGeneral.h"

#include "Engine/World.h"

#include "Enemy/SoEnemy.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEAWait::OnEnter(ASoEnemy* Owner)
{
	if (Range > KINDA_SMALL_NUMBER)
		RandomFactor = FMath::RandRange(-Range, Range);
	else
		RandomFactor = 0.0f;

	RestTime = Duration + RandomFactor;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool USoEAWait::OnTick(float DeltaSeconds, ASoEnemy* Owner)
{
	RestTime -= DeltaSeconds;
	return RestTime > 0.0f;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEAChangeActionSet::OnEnter(ASoEnemy* Owner)
{
	Owner->ChangeActionList(NewActionList);
	RestTime = Duration;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool USoEAChangeActionSet::OnTick(float DeltaSeconds, ASoEnemy* Owner)
{
	RestTime -= DeltaSeconds;
	return RestTime > 0.0f;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEAModifyFloat::OnEnter(ASoEnemy* Owner)
{
	Owner->ModifyFloatValue(Variable, Value, bDelta);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEABPEvent::OnEnter(ASoEnemy* Owner)
{
	UE_LOG(LogSoEnemyAI, Verbose, TEXT("BP event executed: %s"), *Name.ToString());
	Owner->ExecuteBlueprintEventBP(Name);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEABPEventIndexed::OnEnter(ASoEnemy* Owner)
{
	UE_LOG(LogSoEnemyAI, Verbose, TEXT("BP event (indexed) executed: %s %d"), *Name.ToString(), Index);

	if (MaxIndex > Index)
	{
		for (int32 i = Index; i <= MaxIndex; ++i)
			Owner->ExecuteBlueprintEventIndexedBP(Name, i);
	}
	else
		Owner->ExecuteBlueprintEventIndexedBP(Name, Index);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEAPlayMaterialAnimation::OnEnter(ASoEnemy* Owner)
{
	UE_LOG(LogSoEnemyAI, Verbose, TEXT("Play material anim: %d"), Index);
	Owner->PlayMaterialAnimation(Index);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEASetAnim::OnEnter(ASoEnemy* Owner)
{
	UE_LOG(LogSoEnemyAI, Verbose, TEXT("USoEASetAnim::OnEnter: %s -> %s"), *SourceName.ToString(), *TargetName.ToString());
	Owner->SetAnimation(SourceName, TargetName);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEASetForcedLookAtPlayer::OnEnter(ASoEnemy* Owner)
{
	Owner->SetForcedLookAtPlayer(bActivate);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEASetDynamicName::OnEnter(ASoEnemy* Owner)
{
	Owner->SetDynamicName(ValueToSet);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USoEASetVOOn::OnEnter(ASoEnemy* Owner)
{
	Owner->SetIdleVOOn(bEnable);
}
